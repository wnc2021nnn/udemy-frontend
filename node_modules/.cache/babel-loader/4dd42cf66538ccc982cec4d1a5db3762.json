{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport Status from \"../../constants/status-constants\";\nimport { getAllCategories } from \"../../api/api-categories\";\n/**\n * Categories Initial state \n */\n\nconst initialState = {\n  listCategory: {\n    entities: [],\n    status: {\n      status: \"\",\n      message: \"\"\n    }\n  }\n};\nexport const fetchCategoriesList = createAsyncThunk(\"categories/fetchCategoriesList\", async () => {\n  const res = await getAllCategories();\n  return res.data.data;\n});\nconst categoriesSlice = createSlice({\n  name: \"categories\",\n  initialState: initialState,\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(fetchCategoriesList.pending, state => {\n      state.listCategory.status.status = Status.LOADING_STATUS;\n    }).addCase(fetchCategoriesList.fulfilled, (state, action) => {\n      state.listCategory.status.status = Status.SUCCESS_STATUS;\n      state.listCategory.entities = action.payload;\n    }).addCase(fetchCategoriesList.rejected, (state, action) => {\n      state.listCategory.status.status = Status.FAILED_STATUS;\n      state.listCategory.status.message = action.error.message;\n    });\n  }\n});\nexport default categoriesSlice.reducer;","map":{"version":3,"sources":["/Users/necvn-448/Documents/GitHub/udemy-frontend/src/store/slices/categoriesSlice.js"],"names":["createSlice","createAsyncThunk","Status","getAllCategories","initialState","listCategory","entities","status","message","fetchCategoriesList","res","data","categoriesSlice","name","reducers","extraReducers","builder","addCase","pending","state","LOADING_STATUS","fulfilled","action","SUCCESS_STATUS","payload","rejected","FAILED_STATUS","error","reducer"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,gBAAtB,QAA8C,kBAA9C;AACA,OAAOC,MAAP,MAAmB,kCAAnB;AACA,SAASC,gBAAT,QAAiC,0BAAjC;AACA;AACA;AACA;;AACA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,YAAY,EAAC;AACTC,IAAAA,QAAQ,EAAE,EADD;AAETC,IAAAA,MAAM,EAAE;AACJA,MAAAA,MAAM,EAAE,EADJ;AAEJC,MAAAA,OAAO,EAAE;AAFL;AAFC;AADI,CAArB;AAWA,OAAO,MAAMC,mBAAmB,GAAGR,gBAAgB,CAC/C,gCAD+C,EAE/C,YAAY;AACR,QAAMS,GAAG,GAAG,MAAMP,gBAAgB,EAAlC;AACA,SAAOO,GAAG,CAACC,IAAJ,CAASA,IAAhB;AACH,CAL8C,CAA5C;AASP,MAAMC,eAAe,GAAGZ,WAAW,CAAC;AAChCa,EAAAA,IAAI,EAAE,YAD0B;AAEhCT,EAAAA,YAAY,EAAEA,YAFkB;AAGhCU,EAAAA,QAAQ,EAAC,EAHuB;AAIhCC,EAAAA,aAAa,EAAGC,OAAD,IAAW;AACtBA,IAAAA,OAAO,CACNC,OADD,CACSR,mBAAmB,CAACS,OAD7B,EACuCC,KAAD,IAAS;AAC3CA,MAAAA,KAAK,CAACd,YAAN,CAAmBE,MAAnB,CAA0BA,MAA1B,GAAmCL,MAAM,CAACkB,cAA1C;AACH,KAHD,EAICH,OAJD,CAISR,mBAAmB,CAACY,SAJ7B,EAIwC,CAACF,KAAD,EAAQG,MAAR,KAAiB;AACrDH,MAAAA,KAAK,CAACd,YAAN,CAAmBE,MAAnB,CAA0BA,MAA1B,GAAmCL,MAAM,CAACqB,cAA1C;AACAJ,MAAAA,KAAK,CAACd,YAAN,CAAmBC,QAAnB,GAA8BgB,MAAM,CAACE,OAArC;AACH,KAPD,EAQCP,OARD,CAQSR,mBAAmB,CAACgB,QAR7B,EAQuC,CAACN,KAAD,EAAQG,MAAR,KAAiB;AACpDH,MAAAA,KAAK,CAACd,YAAN,CAAmBE,MAAnB,CAA0BA,MAA1B,GAAmCL,MAAM,CAACwB,aAA1C;AACAP,MAAAA,KAAK,CAACd,YAAN,CAAmBE,MAAnB,CAA0BC,OAA1B,GAAoCc,MAAM,CAACK,KAAP,CAAanB,OAAjD;AACH,KAXD;AAYH;AAjB+B,CAAD,CAAnC;AAoBA,eAAeI,eAAe,CAACgB,OAA/B","sourcesContent":["import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport Status from \"../../constants/status-constants\";\nimport { getAllCategories } from \"../../api/api-categories\";\n/**\n * Categories Initial state \n */\nconst initialState = {\n    listCategory:{\n        entities: [],\n        status: {\n            status: \"\",\n            message: \"\"\n        }\n    }\n}\n\n\nexport const fetchCategoriesList = createAsyncThunk(\n    \"categories/fetchCategoriesList\",\n    async () => {\n        const res = await getAllCategories();\n        return res.data.data;\n    },\n);\n\n\nconst categoriesSlice = createSlice({\n    name: \"categories\",\n    initialState: initialState,\n    reducers:{},\n    extraReducers: (builder)=>{\n        builder\n        .addCase(fetchCategoriesList.pending, (state)=>{\n            state.listCategory.status.status = Status.LOADING_STATUS;\n        })\n        .addCase(fetchCategoriesList.fulfilled, (state, action)=>{\n            state.listCategory.status.status = Status.SUCCESS_STATUS;\n            state.listCategory.entities = action.payload;\n        })\n        .addCase(fetchCategoriesList.rejected, (state, action)=>{\n            state.listCategory.status.status = Status.FAILED_STATUS;\n            state.listCategory.status.message = action.error.message;\n        })\n    }\n})\n\nexport default categoriesSlice.reducer;\n\n\n"]},"metadata":{},"sourceType":"module"}