{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { getAllCourses } from \"../../api/api-courses\";\nimport Status from \"../../constants/status-constants\";\nconst LIMIT_ENTITIES = 10;\nconst MOST_VIEW_COURSES_PARAMS = {\n  sort: \"view_from_last_week_des\",\n  limit: LIMIT_ENTITIES\n};\nconst NEWEST_COURSES_PARAMS = {\n  sort: \"created_date_des\",\n  limit: LIMIT_ENTITIES\n};\nconst initialState = {\n  listCourses: {\n    entities: [],\n    status: {\n      status: \"\",\n      message: \"\"\n    }\n  },\n  listMostViewCourses: {\n    entities: [],\n    status: {\n      status: \"\",\n      message: \"\"\n    }\n  },\n  listNewestCourses: {\n    entities: [],\n    status: {\n      status: \"\",\n      message: \"\"\n    }\n  }\n};\n\nconst sendAPIRequest = async params => {\n  const response = await getAllCourses(params);\n  return response.data.data;\n};\n/**\n * Get all courses thunk middleware\n */\n\n\nexport const fetchCourses = createAsyncThunk(\"courses/fetchCourses\", async () => await sendAPIRequest());\nexport const fetchMostViewCourses = createAsyncThunk(\"courses/fetchMostViewCourses\", async () => await sendAPIRequest(MOST_VIEW_COURSES_PARAMS));\nexport const fetchNewestCourses = createAsyncThunk(\"courses/fetchNewestCourses\", async () => await sendAPIRequest(NEWEST_COURSES_PARAMS));\nconst courseSlice = createSlice({\n  name: \"courses\",\n  initialState: initialState,\n  reducers: {},\n  extraReducers: builder => {\n    builder // Get all courses\n    .addCase(fetchCourses.pending, (state, action) => {\n      state.listCourses.status.status = Status.LOADING_STATUS;\n      state.listCourses.status.message = \"Fetching all courses!\";\n    }).addCase(fetchCourses.fulfilled, (state, action) => {\n      state.listCourses.status.status = Status.SUCCESS_STATUS;\n      state.listCourses.message = \"Get all course successfuly!\";\n      state.listCourses.entities = action.payload;\n    }).addCase(fetchCourses.rejected, (state, action) => {\n      state.listCourses.status.status = Status.FAILED_STATUS;\n      state.listCourses.status.message = action.error.message;\n    }) // Get most view courses\n    .addCase(fetchMostViewCourses.pending, (state, action) => {\n      state.listMostViewCourses.status.status = Status.LOADING_STATUS;\n      state.listMostViewCourses.status.message = \"Fetching all courses!\";\n    }).addCase(fetchMostViewCourses.fulfilled, (state, action) => {\n      state.listMostViewCourses.status.status = Status.SUCCESS_STATUS;\n      state.listMostViewCourses.message = \"Get all course successfuly!\";\n      state.listMostViewCourses.entities = action.payload;\n    }).addCase(fetchMostViewCourses.rejected, (state, action) => {\n      state.listMostViewCourses.status.status = Status.FAILED_STATUS;\n      state.listMostViewCourses.status.message = action.error.message;\n    }) // Get newest courses\n    .addCase(fetchNewestCourses.pending, (state, action) => {\n      state.listNewestCourses.status.status = Status.LOADING_STATUS;\n      state.listNewestCourses.status.message = \"Fetching all courses!\";\n    }).addCase(fetchNewestCourses.fulfilled, (state, action) => {\n      state.listNewestCourses.status.status = Status.SUCCESS_STATUS;\n      state.listNewestCourses.message = \"Get all course successfuly!\";\n      state.listNewestCourses.entities = action.payload;\n    }).addCase(fetchNewestCourses.rejected, (state, action) => {\n      state.listNewestCourses.status.status = Status.FAILED_STATUS;\n      state.listNewestCourses.status.message = action.error.message;\n    });\n  }\n});\nexport default courseSlice.reducer;","map":{"version":3,"sources":["/Users/necvn-448/Documents/GitHub/udemy-frontend/src/store/slices/coursesSlice.js"],"names":["createSlice","createAsyncThunk","getAllCourses","Status","LIMIT_ENTITIES","MOST_VIEW_COURSES_PARAMS","sort","limit","NEWEST_COURSES_PARAMS","initialState","listCourses","entities","status","message","listMostViewCourses","listNewestCourses","sendAPIRequest","params","response","data","fetchCourses","fetchMostViewCourses","fetchNewestCourses","courseSlice","name","reducers","extraReducers","builder","addCase","pending","state","action","LOADING_STATUS","fulfilled","SUCCESS_STATUS","payload","rejected","FAILED_STATUS","error","reducer"],"mappings":"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","sourcesContent":["import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { getAllCourses } from \"../../api/api-courses\";\nimport Status from \"../../constants/status-constants\";\n\nconst LIMIT_ENTITIES = 10;\nconst MOST_VIEW_COURSES_PARAMS = {\n  sort: \"view_from_last_week_des\",\n  limit: LIMIT_ENTITIES,\n};\n\nconst NEWEST_COURSES_PARAMS = {\n    sort: \"created_date_des\",\n    limit: LIMIT_ENTITIES,\n  };\n\nconst initialState = {\n  listCourses: {\n    entities: [],\n    status: {\n      status: \"\",\n      message: \"\",\n    },\n  },\n  listMostViewCourses: {\n    entities: [],\n    status: {\n      status: \"\",\n      message: \"\",\n    },\n  },\n  listNewestCourses: {\n    entities: [],\n    status: {\n      status: \"\",\n      message: \"\",\n    },\n  },\n};\n\nconst sendAPIRequest = async (params) => {\n  const response = await getAllCourses(params);\n  return response.data.data;\n};\n\n/**\n * Get all courses thunk middleware\n */\nexport const fetchCourses = createAsyncThunk(\n  \"courses/fetchCourses\",\n  async () => await sendAPIRequest()\n);\n\nexport const fetchMostViewCourses = createAsyncThunk(\n  \"courses/fetchMostViewCourses\",\n  async () => await sendAPIRequest(MOST_VIEW_COURSES_PARAMS)\n);\n\nexport const fetchNewestCourses = createAsyncThunk(\n  \"courses/fetchNewestCourses\",\n  async () => await sendAPIRequest(NEWEST_COURSES_PARAMS)\n);\n\nconst courseSlice = createSlice({\n  name: \"courses\",\n  initialState: initialState,\n  reducers: {},\n  extraReducers: (builder) => {\n    builder\n      // Get all courses\n      .addCase(fetchCourses.pending, (state, action) => {\n        state.listCourses.status.status = Status.LOADING_STATUS;\n        state.listCourses.status.message = \"Fetching all courses!\";\n      })\n      .addCase(fetchCourses.fulfilled, (state, action) => {\n        state.listCourses.status.status = Status.SUCCESS_STATUS;\n        state.listCourses.message = \"Get all course successfuly!\";\n        state.listCourses.entities = action.payload;\n      })\n      .addCase(fetchCourses.rejected, (state, action) => {\n        state.listCourses.status.status = Status.FAILED_STATUS;\n        state.listCourses.status.message = action.error.message;\n      })\n      // Get most view courses\n      .addCase(fetchMostViewCourses.pending, (state, action) => {\n        state.listMostViewCourses.status.status = Status.LOADING_STATUS;\n        state.listMostViewCourses.status.message = \"Fetching all courses!\";\n      })\n      .addCase(fetchMostViewCourses.fulfilled, (state, action) => {\n        state.listMostViewCourses.status.status = Status.SUCCESS_STATUS;\n        state.listMostViewCourses.message = \"Get all course successfuly!\";\n        state.listMostViewCourses.entities = action.payload;\n      })\n      .addCase(fetchMostViewCourses.rejected, (state, action) => {\n        state.listMostViewCourses.status.status = Status.FAILED_STATUS;\n        state.listMostViewCourses.status.message = action.error.message;\n      })\n      // Get newest courses\n      .addCase(fetchNewestCourses.pending, (state, action) => {\n        state.listNewestCourses.status.status = Status.LOADING_STATUS;\n        state.listNewestCourses.status.message = \"Fetching all courses!\";\n      })\n      .addCase(fetchNewestCourses.fulfilled, (state, action) => {\n        state.listNewestCourses.status.status = Status.SUCCESS_STATUS;\n        state.listNewestCourses.message = \"Get all course successfuly!\";\n        state.listNewestCourses.entities = action.payload;\n      })\n      .addCase(fetchNewestCourses.rejected, (state, action) => {\n        state.listNewestCourses.status.status = Status.FAILED_STATUS;\n        state.listNewestCourses.status.message = action.error.message;\n      })\n  },\n});\n\nexport default courseSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}