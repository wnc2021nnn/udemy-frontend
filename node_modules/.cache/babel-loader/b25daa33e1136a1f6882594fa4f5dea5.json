{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { login } from \"../../api/user-api\";\nimport Status from \"../../constants/status-constants\";\nconst initialState = {\n  userInform: {\n    user: {},\n    status: {\n      status: \"\",\n      message: \"\"\n    }\n  }\n};\n\nconst sendAPIRequest = async body => {\n  const res = await login(body);\n  return res.data.data;\n};\n\nexport const userLogin = createAsyncThunk(\"user/userLogin\", async body => {\n  const res = await sendAPIRequest(body);\n  return res;\n});\nconst userSlice = createSlice({\n  name: \"user\",\n  initialState: initialState,\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(userLogin.pending, (state, action) => {\n      state.userInform.status.status = Status.LOADING_STATUS;\n    }).addCase(userLogin.fulfilled, (state, action) => {\n      state.userInform.status.status = Status.SUCCESS_STATUS;\n      state.userInform.user = action.payload;\n    }).addCase(userLogin.rejected, (state, action) => {\n      state.userInform.status.status = Status.FAILED_STATUS;\n      state.userInform.status.message = action.error.message;\n    });\n  }\n});\nexport default userSlice.reducer;","map":{"version":3,"sources":["/Users/necvn-448/Documents/GitHub/udemy-frontend/src/store/slices/userSlice.js"],"names":["createSlice","createAsyncThunk","login","Status","initialState","userInform","user","status","message","sendAPIRequest","body","res","data","userLogin","userSlice","name","reducers","extraReducers","builder","addCase","pending","state","action","LOADING_STATUS","fulfilled","SUCCESS_STATUS","payload","rejected","FAILED_STATUS","error","reducer"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,gBAAtB,QAA8C,kBAA9C;AACA,SAASC,KAAT,QAAsB,oBAAtB;AACA,OAAOC,MAAP,MAAmB,kCAAnB;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,UAAU,EAAE;AACVC,IAAAA,IAAI,EAAE,EADI;AAEVC,IAAAA,MAAM,EAAE;AACNA,MAAAA,MAAM,EAAE,EADF;AAENC,MAAAA,OAAO,EAAE;AAFH;AAFE;AADO,CAArB;;AAUA,MAAMC,cAAc,GAAG,MAAOC,IAAP,IAAgB;AACrC,QAAMC,GAAG,GAAG,MAAMT,KAAK,CAACQ,IAAD,CAAvB;AACA,SAAOC,GAAG,CAACC,IAAJ,CAASA,IAAhB;AACD,CAHD;;AAKA,OAAO,MAAMC,SAAS,GAAGZ,gBAAgB,CAAC,gBAAD,EAAmB,MAAOS,IAAP,IAAgB;AAC1E,QAAMC,GAAG,GAAG,MAAMF,cAAc,CAACC,IAAD,CAAhC;AACA,SAAOC,GAAP;AACD,CAHwC,CAAlC;AAKP,MAAMG,SAAS,GAAGd,WAAW,CAAC;AAC5Be,EAAAA,IAAI,EAAE,MADsB;AAE5BX,EAAAA,YAAY,EAAEA,YAFc;AAG5BY,EAAAA,QAAQ,EAAE,EAHkB;AAI5BC,EAAAA,aAAa,EAAGC,OAAD,IAAa;AAC1BA,IAAAA,OAAO,CACNC,OADD,CACSN,SAAS,CAACO,OADnB,EAC4B,CAACC,KAAD,EAAQC,MAAR,KAAiB;AACzCD,MAAAA,KAAK,CAAChB,UAAN,CAAiBE,MAAjB,CAAwBA,MAAxB,GAAiCJ,MAAM,CAACoB,cAAxC;AACH,KAHD,EAICJ,OAJD,CAISN,SAAS,CAACW,SAJnB,EAI8B,CAACH,KAAD,EAAQC,MAAR,KAAiB;AAC3CD,MAAAA,KAAK,CAAChB,UAAN,CAAiBE,MAAjB,CAAwBA,MAAxB,GAAiCJ,MAAM,CAACsB,cAAxC;AACAJ,MAAAA,KAAK,CAAChB,UAAN,CAAiBC,IAAjB,GAAwBgB,MAAM,CAACI,OAA/B;AACH,KAPD,EAQCP,OARD,CAQSN,SAAS,CAACc,QARnB,EAQ6B,CAACN,KAAD,EAAQC,MAAR,KAAiB;AAC1CD,MAAAA,KAAK,CAAChB,UAAN,CAAiBE,MAAjB,CAAwBA,MAAxB,GAAiCJ,MAAM,CAACyB,aAAxC;AACAP,MAAAA,KAAK,CAAChB,UAAN,CAAiBE,MAAjB,CAAwBC,OAAxB,GAAkCc,MAAM,CAACO,KAAP,CAAarB,OAA/C;AACH,KAXD;AAYD;AAjB2B,CAAD,CAA7B;AAoBA,eAAeM,SAAS,CAACgB,OAAzB","sourcesContent":["import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { login } from \"../../api/user-api\";\nimport Status from \"../../constants/status-constants\";\n\nconst initialState = {\n  userInform: {\n    user: {},\n    status: {\n      status: \"\",\n      message: \"\",\n    },\n  },\n};\n\nconst sendAPIRequest = async (body) => {\n  const res = await login(body);\n  return res.data.data;\n};\n\nexport const userLogin = createAsyncThunk(\"user/userLogin\", async (body) => {\n  const res = await sendAPIRequest(body);\n  return res;\n});\n\nconst userSlice = createSlice({\n  name: \"user\",\n  initialState: initialState,\n  reducers: {},\n  extraReducers: (builder) => {\n    builder\n    .addCase(userLogin.pending, (state, action)=>{\n        state.userInform.status.status = Status.LOADING_STATUS;\n    })\n    .addCase(userLogin.fulfilled, (state, action)=>{\n        state.userInform.status.status = Status.SUCCESS_STATUS;\n        state.userInform.user = action.payload;\n    })\n    .addCase(userLogin.rejected, (state, action)=>{\n        state.userInform.status.status = Status.FAILED_STATUS;\n        state.userInform.status.message = action.error.message;\n    })\n  },\n});\n\nexport default userSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}