{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport Status from \"../../constants/status-constants\";\nimport { getAllCategories, getTopics } from \"../../api/api-categories\";\nconst FETCH_HOT_TOPICS_PARAMS = {\n  sort: \"register_des\"\n};\n/**\n * Categories Initial state \n */\n\nconst initialState = {\n  listCategory: {\n    entities: [],\n    status: {\n      status: \"\",\n      message: \"\"\n    }\n  },\n  listHotTopic: {\n    entities: [],\n    status: {\n      status: \"\",\n      message: \"\"\n    }\n  }\n};\nexport const fetchHotTopicList = createAsyncThunk(\"categories/fetchHotTopicList\", async FETCH_HOT_TOPICS_PARAMS => {\n  const res = await getTopics(FETCH_HOT_TOPICS_PARAMS);\n  return res.data.data;\n});\nexport const fetchCategoriesList = createAsyncThunk(\"categories/fetchCategoriesList\", async () => {\n  const res = await getAllCategories();\n  return res.data.data;\n});\nconst categoriesSlice = createSlice({\n  name: \"categories\",\n  initialState: initialState,\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(fetchCategoriesList.pending, state => {\n      state.listCategory.status.status = Status.LOADING_STATUS;\n    }).addCase(fetchCategoriesList.fulfilled, (state, action) => {\n      state.listCategory.status.status = Status.SUCCESS_STATUS;\n      state.listCategory.entities = action.payload;\n    }).addCase(fetchCategoriesList.rejected, (state, action) => {\n      state.listCategory.status.status = Status.FAILED_STATUS;\n      state.listCategory.status.message = action.error.message;\n    });\n  }\n});\nexport default categoriesSlice.reducer;","map":{"version":3,"sources":["/Users/necvn-448/Documents/GitHub/udemy-frontend/src/store/slices/categoriesSlice.js"],"names":["createSlice","createAsyncThunk","Status","getAllCategories","getTopics","FETCH_HOT_TOPICS_PARAMS","sort","initialState","listCategory","entities","status","message","listHotTopic","fetchHotTopicList","res","data","fetchCategoriesList","categoriesSlice","name","reducers","extraReducers","builder","addCase","pending","state","LOADING_STATUS","fulfilled","action","SUCCESS_STATUS","payload","rejected","FAILED_STATUS","error","reducer"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,gBAAtB,QAA8C,kBAA9C;AACA,OAAOC,MAAP,MAAmB,kCAAnB;AACA,SAASC,gBAAT,EAA2BC,SAA3B,QAA4C,0BAA5C;AAGA,MAAMC,uBAAuB,GAAG;AAC5BC,EAAAA,IAAI,EAAE;AADsB,CAAhC;AAGA;AACA;AACA;;AACA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,YAAY,EAAC;AACTC,IAAAA,QAAQ,EAAE,EADD;AAETC,IAAAA,MAAM,EAAE;AACJA,MAAAA,MAAM,EAAE,EADJ;AAEJC,MAAAA,OAAO,EAAE;AAFL;AAFC,GADI;AAQjBC,EAAAA,YAAY,EAAC;AACTH,IAAAA,QAAQ,EAAE,EADD;AAETC,IAAAA,MAAM,EAAE;AACJA,MAAAA,MAAM,EAAE,EADJ;AAEJC,MAAAA,OAAO,EAAE;AAFL;AAFC;AARI,CAArB;AAiBA,OAAO,MAAME,iBAAiB,GAAGZ,gBAAgB,CAC7C,8BAD6C,EACb,MAAOI,uBAAP,IAAkC;AAC9D,QAAMS,GAAG,GAAG,MAAMV,SAAS,CAACC,uBAAD,CAA3B;AACA,SAAOS,GAAG,CAACC,IAAJ,CAASA,IAAhB;AACH,CAJ4C,CAA1C;AAQP,OAAO,MAAMC,mBAAmB,GAAGf,gBAAgB,CAC/C,gCAD+C,EAE/C,YAAY;AACR,QAAMa,GAAG,GAAG,MAAMX,gBAAgB,EAAlC;AACA,SAAOW,GAAG,CAACC,IAAJ,CAASA,IAAhB;AACH,CAL8C,CAA5C;AASP,MAAME,eAAe,GAAGjB,WAAW,CAAC;AAChCkB,EAAAA,IAAI,EAAE,YAD0B;AAEhCX,EAAAA,YAAY,EAAEA,YAFkB;AAGhCY,EAAAA,QAAQ,EAAC,EAHuB;AAIhCC,EAAAA,aAAa,EAAGC,OAAD,IAAW;AACtBA,IAAAA,OAAO,CACNC,OADD,CACSN,mBAAmB,CAACO,OAD7B,EACuCC,KAAD,IAAS;AAC3CA,MAAAA,KAAK,CAAChB,YAAN,CAAmBE,MAAnB,CAA0BA,MAA1B,GAAmCR,MAAM,CAACuB,cAA1C;AACH,KAHD,EAICH,OAJD,CAISN,mBAAmB,CAACU,SAJ7B,EAIwC,CAACF,KAAD,EAAQG,MAAR,KAAiB;AACrDH,MAAAA,KAAK,CAAChB,YAAN,CAAmBE,MAAnB,CAA0BA,MAA1B,GAAmCR,MAAM,CAAC0B,cAA1C;AACAJ,MAAAA,KAAK,CAAChB,YAAN,CAAmBC,QAAnB,GAA8BkB,MAAM,CAACE,OAArC;AACH,KAPD,EAQCP,OARD,CAQSN,mBAAmB,CAACc,QAR7B,EAQuC,CAACN,KAAD,EAAQG,MAAR,KAAiB;AACpDH,MAAAA,KAAK,CAAChB,YAAN,CAAmBE,MAAnB,CAA0BA,MAA1B,GAAmCR,MAAM,CAAC6B,aAA1C;AACAP,MAAAA,KAAK,CAAChB,YAAN,CAAmBE,MAAnB,CAA0BC,OAA1B,GAAoCgB,MAAM,CAACK,KAAP,CAAarB,OAAjD;AACH,KAXD;AAYH;AAjB+B,CAAD,CAAnC;AAoBA,eAAeM,eAAe,CAACgB,OAA/B","sourcesContent":["import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport Status from \"../../constants/status-constants\";\nimport { getAllCategories, getTopics } from \"../../api/api-categories\";\n\n\nconst FETCH_HOT_TOPICS_PARAMS = {\n    sort: \"register_des\"\n}\n/**\n * Categories Initial state \n */\nconst initialState = {\n    listCategory:{\n        entities: [],\n        status: {\n            status: \"\",\n            message: \"\"\n        }\n    },\n    listHotTopic:{\n        entities: [],\n        status: {\n            status: \"\",\n            message: \"\"\n        }\n    }\n}\n\nexport const fetchHotTopicList = createAsyncThunk(\n    \"categories/fetchHotTopicList\", async (FETCH_HOT_TOPICS_PARAMS) =>{\n        const res = await getTopics(FETCH_HOT_TOPICS_PARAMS);\n        return res.data.data;\n    }\n)\n\n\nexport const fetchCategoriesList = createAsyncThunk(\n    \"categories/fetchCategoriesList\",\n    async () => {\n        const res = await getAllCategories();\n        return res.data.data;\n    },\n);\n\n\nconst categoriesSlice = createSlice({\n    name: \"categories\",\n    initialState: initialState,\n    reducers:{},\n    extraReducers: (builder)=>{\n        builder\n        .addCase(fetchCategoriesList.pending, (state)=>{\n            state.listCategory.status.status = Status.LOADING_STATUS;\n        })\n        .addCase(fetchCategoriesList.fulfilled, (state, action)=>{\n            state.listCategory.status.status = Status.SUCCESS_STATUS;\n            state.listCategory.entities = action.payload;\n        })\n        .addCase(fetchCategoriesList.rejected, (state, action)=>{\n            state.listCategory.status.status = Status.FAILED_STATUS;\n            state.listCategory.status.message = action.error.message;\n        })\n    }\n})\n\nexport default categoriesSlice.reducer;\n\n\n"]},"metadata":{},"sourceType":"module"}